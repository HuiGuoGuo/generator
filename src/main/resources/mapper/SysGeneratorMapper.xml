<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.stone.generator.dao.SysGeneratorDao">
    <resultMap id="tableMap" type="com.stone.generator.pojo.vo.TableVO">
        <result column="tableName" property="tableName" jdbcType="VARCHAR" />
        <result column="engine" property="engine" jdbcType="VARCHAR" />
        <result column="tableComment" property="tableComment" jdbcType="VARCHAR" />
        <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    </resultMap>
    <resultMap id="columnMap" type="com.stone.generator.pojo.info.ColumnInfo">
        <result column="columnName" property="columnName" jdbcType="VARCHAR" />
        <result column="dataType" property="dataType" jdbcType="VARCHAR" />
        <result column="columnComment" property="columnComment" jdbcType="VARCHAR" />
        <result column="columnKey" property="columnKey" jdbcType="VARCHAR" />
        <result column="extra" property="extra" jdbcType="VARCHAR" />
    </resultMap>

    <select id="queryList" resultMap="tableMap" >
        select table_name tableName, engine, table_comment tableComment, create_time createTime from information_schema.tables
        where table_schema = (select database())
        <if test="tableName != null and tableName.trim() != ''">
            and table_name like concat('%', #{tableName}, '%')
        </if>
        order by create_time desc
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="queryTotal" resultType="int">
        select count(*) from information_schema.tables where table_schema = (select database())
        <if test="tableName != null and tableName.trim() != ''">
            and table_name like concat('%', #{tableName}, '%')
        </if>
    </select>

    <select id="queryTable" resultMap="tableMap">
		select table_name tableName, engine, table_comment tableComment, create_time createTime from information_schema.tables
			where table_schema = (select database()) and table_name = #{tableName}
	</select>

    <select id="queryColumns" resultMap="columnMap">
		select column_name columnName, data_type dataType, column_comment columnComment, column_key columnKey, extra from information_schema.columns
 			where table_name = #{tableName} and table_schema = (select database()) order by ordinal_position
	</select>
</mapper>